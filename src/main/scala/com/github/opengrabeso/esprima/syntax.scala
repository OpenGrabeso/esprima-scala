/*
ScalaFromJS: 2017-12-05 14:38:17.341
syntax.js
*/

package com.github.opengrabeso.esprima

object Syntax {
  val AssignmentExpression = "AssignmentExpression"
  val AssignmentPattern = "AssignmentPattern"
  val ArrayExpression = "ArrayExpression"
  val ArrayPattern = "ArrayPattern"
  val ArrowFunctionExpression = "ArrowFunctionExpression"
  val AwaitExpression = "AwaitExpression"
  val BlockStatement = "BlockStatement"
  val BinaryExpression = "BinaryExpression"
  val BreakStatement = "BreakStatement"
  val CallExpression = "CallExpression"
  val CatchClause = "CatchClause"
  val ClassBody = "ClassBody"
  val ClassDeclaration = "ClassDeclaration"
  val ClassExpression = "ClassExpression"
  val ConditionalExpression = "ConditionalExpression"
  val ContinueStatement = "ContinueStatement"
  val DoWhileStatement = "DoWhileStatement"
  val DebuggerStatement = "DebuggerStatement"
  val EmptyStatement = "EmptyStatement"
  val ExportAllDeclaration = "ExportAllDeclaration"
  val ExportDefaultDeclaration = "ExportDefaultDeclaration"
  val ExportNamedDeclaration = "ExportNamedDeclaration"
  val ExportSpecifier = "ExportSpecifier"
  val ExpressionStatement = "ExpressionStatement"
  val ForStatement = "ForStatement"
  val ForOfStatement = "ForOfStatement"
  val ForInStatement = "ForInStatement"
  val FunctionDeclaration = "FunctionDeclaration"
  val FunctionExpression = "FunctionExpression"
  val Identifier = "Identifier"
  val IfStatement = "IfStatement"
  val Import = "Import"
  val ImportDeclaration = "ImportDeclaration"
  val ImportDefaultSpecifier = "ImportDefaultSpecifier"
  val ImportNamespaceSpecifier = "ImportNamespaceSpecifier"
  val ImportSpecifier = "ImportSpecifier"
  val Literal = "Literal"
  val LabeledStatement = "LabeledStatement"
  val LogicalExpression = "LogicalExpression"
  val MemberExpression = "MemberExpression"
  val MetaProperty = "MetaProperty"
  val MethodDefinition = "MethodDefinition"
  val NewExpression = "NewExpression"
  val ObjectExpression = "ObjectExpression"
  val ObjectPattern = "ObjectPattern"
  val Program = "Program"
  val Property = "Property"
  val RestElement = "RestElement"
  val ReturnStatement = "ReturnStatement"
  val SequenceExpression = "SequenceExpression"
  val SpreadElement = "SpreadElement"
  val Super = "Super"
  val SwitchCase = "SwitchCase"
  val SwitchStatement = "SwitchStatement"
  val TaggedTemplateExpression = "TaggedTemplateExpression"
  val TemplateElement = "TemplateElement"
  val TemplateLiteral = "TemplateLiteral"
  val ThisExpression = "ThisExpression"
  val ThrowStatement = "ThrowStatement"
  val TryStatement = "TryStatement"
  val UnaryExpression = "UnaryExpression"
  val UpdateExpression = "UpdateExpression"
  val VariableDeclaration = "VariableDeclaration"
  val VariableDeclarator = "VariableDeclarator"
  val WhileStatement = "WhileStatement"
  val WithStatement = "WithStatement"
  val YieldExpression = "YieldExpression"
}
